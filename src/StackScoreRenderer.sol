// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

import {LibString} from "solady/utils/LibString.sol";

contract StackScoreRenderer {
    bytes3[3][11] public palettes = [
    // row 1
    [bytes3(0x4F4C42), bytes3(0xACA695), bytes3(0xDBD9D1)], // grey
    [bytes3(0x1D3C86), bytes3(0x2960E7), bytes3(0x4DB0F3)], // blue
    [bytes3(0x0331A6), bytes3(0x5E83AA), bytes3(0xD2B481)], // blue
    [bytes3(0x412C3F), bytes3(0xDA6A87), bytes3(0xDF819A)], // pink
    // row 2
    [bytes3(0x0B241A), bytes3(0x5BC793), bytes3(0x5E83AA)], // green
    [bytes3(0xEB90BE), bytes3(0xEC5E3B), bytes3(0xF9D85B)], // pink
    [bytes3(0xA13120), bytes3(0xEB5640), bytes3(0xEBDE8F)], // red
    [bytes3(0x0331A6), bytes3(0xB6BEC6), bytes3(0xF6CB82)], // blue
    // row 3
    [bytes3(0x3B7BF6), bytes3(0xB7CDCE), bytes3(0xF09ABD)], // green
    [bytes3(0x3579BD), bytes3(0xDEAC91), bytes3(0xEC6C3F)], // pink
    [bytes3(0x301C28), bytes3(0xCFA37F), bytes3(0xD7482C)]  // red
    ];

    uint constant SECONDS_PER_DAY = 24 * 60 * 60;
    uint constant SECONDS_PER_HOUR = 60 * 60;
    uint constant SECONDS_PER_MINUTE = 60;
    int constant OFFSET19700101 = 2440588;

    // Function to get a specific color from a palette
    function getColor(uint paletteIndex, uint colorIndex) public view returns (bytes3) {
        require(paletteIndex < palettes.length, "Palette index out of bounds");
        require(colorIndex < 3, "Color index out of bounds");
        return palettes[paletteIndex][colorIndex];
    }

    // Function to get a specific color from a palette as a hex string
    function getColorAsHexString(uint paletteIndex, uint colorIndex) public view returns (string memory) {
        bytes3 color = getColor(paletteIndex, colorIndex);
        return LibString.toHexStringNoPrefix(uint24(color), 3); // 3 bytes for RGB
    }

    // From: https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary/blob/master/contracts/BokkyPooBahsDateTimeLibrary.sol
    function timestampToDateTime(uint timestamp) internal pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {
        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);
        uint secs = timestamp % SECONDS_PER_DAY;
        hour = secs / SECONDS_PER_HOUR;
        secs = secs % SECONDS_PER_HOUR;
        minute = secs / SECONDS_PER_MINUTE;
        second = secs % SECONDS_PER_MINUTE;
    }

    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {
        int __days = int(_days);

        int L = __days + 68569 + OFFSET19700101;
        int N = 4 * L / 146097;
        L = L - (146097 * N + 3) / 4;
        int _year = 4000 * (L + 1) / 1461001;
        L = L - 1461 * _year / 4 + 31;
        int _month = 80 * L / 2447;
        int _day = L - 2447 * _month / 80;
        L = _month / 11;
        _month = _month + 2 - 12 * L;
        _year = 100 * (N - 49) + _year + L;

        year = uint(_year);
        month = uint(_month);
        day = uint(_day);
    }

    function getTimestampString(uint256 timestamp) public view returns (string memory) {
        (uint year, uint month, uint day, uint hour, uint minute, uint second) = timestampToDateTime(timestamp);
        return string(abi.encodePacked(
            LibString.toString(year), "-",
            LibString.toString(month), "-",
            LibString.toString(day), " ",
            LibString.toString(hour), ":",
            LibString.toString(minute), ":",
            LibString.toString(second)
        ));
    }

    // Function to get an entire palette as an array of hex strings
    function getPaletteAsHexStrings(uint paletteIndex) public view returns (string[3] memory) {
        require(paletteIndex < palettes.length, "Palette index out of bounds");
        string[3] memory hexColors;
        for (uint i = 0; i < 3; i++) {
            hexColors[i] = getColorAsHexString(paletteIndex, i);
        }
        return hexColors;
    }


    function generateColors(uint256 paletteIndex) private view returns (string memory) {
        // Get each of the three colors in the palette
        string[3] memory colors = getPaletteAsHexStrings(paletteIndex);
        string memory topColor = colors[0];
        string memory middleColor = colors[1];
        string memory bottomColor = colors[2];

        return string(abi.encodePacked(
            '<g filter="url(#A)">'
            '<path fill="#', bottomColor, '" d="M-230.25 270h900v330.75h-900z"/>'
        '</g>'
        '<g filter="url(#B)">'
        '<path fill="#', topColor, '" d="M-230.25-60h900v330h-900z"/>'
        '</g>'
        '<g style="mix-blend-mode:overlay" class="B">'
        '<path d="M391 202.95c-.312 0-.588-.048-.828-.144s-.468-.262-.684-.498-.436-.57-.66-.99c-.112-.212-.21-.374-.294-.486a.89.89 0 0 0-.276-.252.74.74 0 0 0-.366-.084c-.224 0-.404.074-.54.222s-.204.354-.204.63c0 .296.078.532.234.708s.374.286.666.33l-.036.54c-.424-.048-.758-.208-1.002-.48s-.366-.642-.366-1.098c0-.288.052-.536.156-.744a1.09 1.09 0 0 1 .438-.48 1.21 1.21 0 0 1 .642-.168c.22 0 .408.036.564.108s.296.192.432.36.284.398.444.702c.196.372.4.66.612.864s.396.312.564.324v-2.364H391v3zm.096-5.098c0 .308-.088.574-.264.798s-.436.398-.768.522-.732.18-1.188.18-.852-.06-1.188-.18-.594-.298-.774-.522a1.25 1.25 0 0 1-.27-.798c0-.304.09-.568.27-.792s.438-.402.774-.522a3.43 3.43 0 0 1 1.188-.186 3.43 3.43 0 0 1 1.188.186c.332.12.588.292.768.516s.264.49.264.798zm-.504 0c0-.2-.068-.372-.204-.516s-.338-.254-.594-.33a3.29 3.29 0 0 0-.918-.114 3.29 3.29 0 0 0-.918.114c-.26.076-.46.188-.6.336s-.21.314-.21.51.07.368.21.516.34.254.6.33a3.29 3.29 0 0 0 .918.114 3.29 3.29 0 0 0 .918-.114c.256-.076.454-.186.594-.33s.204-.316.204-.516zm-3.264-.6l.024-.48 3.06 1.68-.024.48-3.06-1.68zm3.672-1.497c-.312 0-.588-.048-.828-.144s-.468-.262-.684-.498-.436-.57-.66-.99c-.112-.212-.21-.374-.294-.486a.89.89 0 0 0-.276-.252.74.74 0 0 0-.366-.084c-.224 0-.404.074-.54.222s-.204.354-.204.63c0 .296.078.532.234.708s.374.286.666.33l-.036.54c-.424-.048-.758-.208-1.002-.48s-.366-.642-.366-1.098c0-.288.052-.536.156-.744a1.09 1.09 0 0 1 .438-.48 1.21 1.21 0 0 1 .642-.168c.22 0 .408.036.564.108s.296.192.432.36.284.398.444.702c.196.372.4.66.612.864s.396.312.564.324v-2.364H391v3zm-.924-5.626v2.088h-.468l-2.868-2.052v-.552h2.832v-.516h.504v.516H391v.516h-.924zm-.504 0h-2.04l2.04 1.464v-1.464zm1.428-3.034v.324h-.72v-.72h.636l1.02.378v.3l-.936-.282zm-4.26-5.851v-.72l3.576-1.524h-3.576v-.516H391v.72l-3.576 1.524H391v.516h-4.26zm2.52-4.726l-2.52 1.284v-.588l1.92-.948-1.92-.948v-.588l2.52 1.272H391v.516h-1.74zm1.836-3.861c0 .336-.09.624-.27.864s-.436.416-.768.54-.726.18-1.182.18-.856-.06-1.188-.18-.594-.304-.774-.54-.27-.528-.27-.864a1.35 1.35 0 0 1 .372-.96c.244-.264.586-.44 1.026-.528l.036.552c-.3.068-.53.184-.69.348a.81.81 0 0 0-.24.588c0 .224.068.414.204.57s.328.274.588.354.568.12.936.12.674-.04.93-.12.452-.198.588-.354.198-.346.198-.57c0-.252-.088-.462-.264-.63s-.43-.288-.762-.348l.03-.546c.468.08.836.254 1.104.522a1.37 1.37 0 0 1 .396 1.002zm.318-7.4c0 .132-.072.222-.186.222-.132 0-.198-.066-.342-.066-.312 0-.54.174-.828.45-.714.69-1.056 1.104-2.016 1.104-.672 0-1.326-.486-1.506-1.122-.036-.126-.048-.252-.048-.384 0-.36.132-.738.366-1.038.144-.186.264-.33.264-.414 0-.108-.114-.228-.3-.474-.126-.168-.204-.354-.264-.528a1.35 1.35 0 0 1-.066-.432c0-.858.678-1.482 1.566-1.482.516 0 1.044.234 1.59.78.72.72 1.464 1.962 1.686 2.85a2.35 2.35 0 0 1 .084.534z" fill-opacity=".5"/>'
        '</g>'
        '<g style="mix-blend-mode:overlay" class="B">'
        '<path d="M391.096 417.384c0 .296-.06.562-.18.798s-.296.418-.516.558a1.65 1.65 0 0 1-.762.246l-.036-.54c.212-.028.392-.088.54-.18a.95.95 0 0 0 .336-.366c.076-.152.114-.328.114-.528s-.024-.362-.072-.498-.126-.244-.222-.312a.59.59 0 0 0-.354-.108c-.144 0-.264.032-.36.096s-.194.182-.282.354-.178.416-.27.744c-.088.304-.182.546-.282.726s-.22.306-.36.39-.322.12-.534.12c-.236 0-.446-.056-.63-.168a1.14 1.14 0 0 1-.426-.492c-.104-.216-.156-.468-.156-.756s.058-.53.174-.738a1.32 1.32 0 0 1 .48-.504c.204-.124.438-.202.702-.234l.036.54a1.19 1.19 0 0 0-.462.156.78.78 0 0 0-.312.312c-.076.132-.114.292-.114.48 0 .264.064.474.192.63s.288.234.492.234c.136 0 .246-.028.33-.084s.158-.16.222-.3a5.15 5.15 0 0 0 .216-.636c.1-.352.21-.628.33-.828a1.13 1.13 0 0 1 .42-.444c.164-.092.366-.138.606-.138.22 0 .418.062.594.186s.306.298.402.522a1.89 1.89 0 0 1 .144.762zm-3.864-3.274v1.302h-.492v-3.12h.492v1.302H391v.516h-3.768zm-.492-3.507v-.696l4.26-1.296v.528l-3.792 1.116 3.792 1.116v.528l-4.26-1.296zm2.58.462v-1.62l.492-.18v1.98l-.492-.18zm1.776-4.42c0 .336-.09.624-.27.864s-.436.416-.768.54-.726.18-1.182.18-.856-.06-1.188-.18-.594-.304-.774-.54-.27-.528-.27-.864a1.35 1.35 0 0 1 .372-.96c.244-.264.586-.44 1.026-.528l.036.552c-.3.068-.53.184-.69.348a.81.81 0 0 0-.24.588c0 .224.068.414.204.57s.328.274.588.354.568.12.936.12.674-.04.93-.12.452-.198.588-.354.198-.346.198-.57c0-.252-.088-.462-.264-.63s-.43-.288-.762-.348l.03-.546c.468.08.836.254 1.104.522a1.37 1.37 0 0 1 .396 1.002zm-4.356-2.146v-.516h1.884l-1.884-1.728v-.636l1.788 1.62 2.472-1.74v.636l-2.112 1.464.408.384H391v.516h-4.26zm.492-8.377v1.302h-.492v-3.12h.492v1.302H391v.516h-3.768zm-.492-2.596v-2.592h.492v2.076h1.38v-2.004h.492v2.004h1.404v-2.124H391v2.64h-4.26zm4.356-4.869c0 .336-.09.624-.27.864s-.436.416-.768.54-.726.18-1.182.18-.856-.06-1.188-.18-.594-.304-.774-.54-.27-.528-.27-.864a1.35 1.35 0 0 1 .372-.96c.244-.264.586-.44 1.026-.528l.036.552c-.3.068-.53.184-.69.348a.81.81 0 0 0-.24.588c0 .224.068.414.204.57s.328.274.588.354.568.12.936.12.674-.04.93-.12.452-.198.588-.354.198-.346.198-.57c0-.252-.088-.462-.264-.63s-.43-.288-.762-.348l.03-.546c.468.08.836.254 1.104.522a1.37 1.37 0 0 1 .396 1.002zm-4.356-2.194v-.516h2.07l-.198.264v-2.28l.198.264h-2.07v-.516H391v.516h-2.094l.198-.264v2.28l-.198-.264H391v.516h-4.26zm0-3.61v-.72l3.576-1.524h-3.576v-.516H391v.72l-3.576 1.524H391v.516h-4.26zm4.356-4.977c0 .336-.086.622-.258.858s-.424.41-.756.534-.734.18-1.206.18-.88-.06-1.212-.18-.59-.302-.762-.534-.258-.522-.258-.858a1.39 1.39 0 0 1 .258-.852c.172-.236.426-.414.762-.534s.736-.186 1.212-.186.874.062 1.206.186.584.298.756.534a1.39 1.39 0 0 1 .258.852zm-.504 0a.82.82 0 0 0-.198-.558c-.132-.156-.326-.274-.582-.354s-.568-.12-.936-.12-.68.04-.936.12-.456.198-.588.354-.204.338-.204.558a.83.83 0 0 0 .204.564c.132.152.328.268.588.348s.568.12.936.12.68-.04.936-.12.45-.196.582-.348.198-.344.198-.564zm-3.852-2.398v-.516h4.02l-.252.258v-2.382H391v2.64h-4.26zm4.356-4.798c0 .336-.086.622-.258.858s-.424.41-.756.534-.734.18-1.206.18-.88-.06-1.212-.18-.59-.302-.762-.534-.258-.522-.258-.858a1.39 1.39 0 0 1 .258-.852c.172-.236.426-.414.762-.534s.736-.186 1.212-.186.874.062 1.206.186.584.298.756.534a1.39 1.39 0 0 1 .258.852zm-.504 0a.82.82 0 0 0-.198-.558c-.132-.156-.326-.274-.582-.354s-.568-.12-.936-.12-.68.04-.936.12-.456.198-.588.354-.204.338-.204.558a.83.83 0 0 0 .204.564c.132.152.328.268.588.348s.568.12.936.12.68-.04.936-.12.45-.196.582-.348.198-.344.198-.564zm.504-3.585a1.36 1.36 0 0 1-.252.81c-.172.236-.424.42-.756.552s-.736.198-1.212.198a3.43 3.43 0 0 1-1.188-.186c-.336-.128-.594-.31-.774-.546a1.38 1.38 0 0 1-.27-.852c0-.38.124-.7.372-.96s.58-.438.996-.534l.036.54c-.276.072-.494.188-.654.348a.81.81 0 0 0-.246.606.83.83 0 0 0 .204.564c.132.156.328.276.588.36s.568.12.936.12.674-.042.93-.126.452-.206.588-.366.198-.352.198-.576c0-.192-.054-.362-.162-.51a1.06 1.06 0 0 0-.444-.354 1.66 1.66 0 0 0-.642-.144v1.02h-.492v-1.5H391v.48l-1.008.024.06-.168c.332.096.59.24.774.432s.27.448.27.768zm-.588-2.29v-1.062h-3.276v1.062h-.492v-2.64h.492v1.062h3.276v-1.062H391v2.64h-.492zm-3.768-3.658v-2.592h.492v2.076h1.38v-2.004h.492v2.004h1.404v-2.124H391v2.64h-4.26zm4.356-4.923c0 .296-.06.562-.18.798s-.296.418-.516.558a1.65 1.65 0 0 1-.762.246l-.036-.54c.212-.028.392-.088.54-.18a.95.95 0 0 0 .336-.366c.076-.152.114-.328.114-.528s-.024-.362-.072-.498-.126-.244-.222-.312a.59.59 0 0 0-.354-.108c-.144 0-.264.032-.36.096s-.194.182-.282.354-.178.416-.27.744c-.088.304-.182.546-.282.726s-.22.306-.36.39-.322.12-.534.12c-.236 0-.446-.056-.63-.168a1.14 1.14 0 0 1-.426-.492c-.104-.216-.156-.468-.156-.756s.058-.53.174-.738a1.32 1.32 0 0 1 .48-.504c.204-.124.438-.202.702-.234l.036.54a1.19 1.19 0 0 0-.462.156.78.78 0 0 0-.312.312c-.076.132-.114.292-.114.48 0 .264.064.474.192.63s.288.234.492.234c.136 0 .246-.028.33-.084s.158-.16.222-.3a5.15 5.15 0 0 0 .216-.636c.1-.352.21-.628.33-.828a1.13 1.13 0 0 1 .42-.444c.164-.092.366-.138.606-.138.22 0 .418.062.594.186s.306.298.402.522a1.89 1.89 0 0 1 .144.762zm-.588-5.809v-1.062h-3.276v1.062h-.492v-2.64h.492v1.062h3.276v-1.062H391v2.64h-.492zm-3.768-3.538v-.72l3.576-1.524h-3.576v-.516H391v.72l-3.576 1.524H391v.516h-4.26zm4.356-4.99c0 .336-.09.624-.27.864s-.436.416-.768.54-.726.18-1.182.18-.856-.06-1.188-.18-.594-.304-.774-.54-.27-.528-.27-.864a1.35 1.35 0 0 1 .372-.96c.244-.264.586-.44 1.026-.528l.036.552c-.3.068-.53.184-.69.348a.81.81 0 0 0-.24.588c0 .224.068.414.204.57s.328.274.588.354.568.12.936.12.674-.04.93-.12.452-.198.588-.354.198-.346.198-.57c0-.252-.088-.462-.264-.63s-.43-.288-.762-.348l.03-.546c.468.08.836.254 1.104.522a1.37 1.37 0 0 1 .396 1.002zm-.816-3.225v-.72h.72v.72h-.72z" fill-opacity=".5"/>'
        '</g>'
        '<g filter="url(#C)">'
        '<path fill="#', middleColor, '" d="M-247.5 195h900v150h-900z"/>'
        '</g>'
        ));
    }

    function getSVG(uint256 tokenId, uint256 score, address account, uint256 paletteIndex, uint256 lastUpdated) public view returns (string memory) {
        string memory lastUpdatedString = string(
            abi.encodePacked("LAST UPDATED", getTimestampString(lastUpdated))
        );
        string memory svg = string(
            abi.encodePacked(
                '<svg xmlns="http://www.w3.org/2000/svg" width="405" height="540" fill="none" xmlns:v="https://vecta.io/nano">'
                '<style><![CDATA[.B{fill:#fff}.C{color-interpolation-filters:sRGB}.D{flood-opacity:0}.E{font-family:"DM Mono", monospace}.F{dominant-baseline:hanging}]]></style>'
                '<defs><style>@import url(\'https://fonts.googleapis.com/css2?family=DM+Mono%3Awght@300400&amp;display=swap\');</style></defs>'
                '<g clip-path="url(#E)">'
                '<rect width="405" height="540" rx="24" fill="color(display-p3 0.0353 0.0392 0.0471)"/>',
                generateColors(paletteIndex),
                '<g style="mix-blend-mode:overlay" class="B E F">'
                '<text x="24" y="24" font-size="7.5" font-weight="300">',
                lastUpdatedString,
                '</text>'
                '</g>',
                '<g style="mix-blend-mode:overlay" class="B E F">'
                '<text x="24" y="175.5" font-size="108" font-weight="300">',
                LibString.toString(score),
                '</text>'
                '</g>'
                '<g style="mix-blend-mode:overlay" class="B E F">'
                '<text x="24" y="282" font-size="7.5">',
                LibString.toHexString(account),
                '</text>'
                '</g>'
                '<g style="mix-blend-mode:overlay" filter="url(#D)">'
                '<rect x="2.625" y="2.625" width="399.75" height="534.75" rx="22.875" stroke="#fff" stroke-width="5.25"/>'
                '</g>'
                '<g style="mix-blend-mode:overlay" class="B">'
                '<path d="M40.32 470.518c-2.592 0-4.864-.48-6.816-1.44-1.952-.992-3.504-2.368-4.656-4.128s-1.824-3.792-2.016-6.096l4.32-.288c.224 1.696.72 3.136 1.488 4.32a7.35 7.35 0 0 0 3.072 2.688c1.312.608 2.88.912 4.704.912 2.4 0 4.256-.464 5.568-1.392s1.968-2.256 1.968-3.984c0-1.12-.256-2.08-.768-2.88s-1.472-1.536-2.88-2.208-3.44-1.344-6.096-2.016c-2.688-.672-4.8-1.408-6.336-2.208-1.504-.8-2.608-1.76-3.312-2.88-.672-1.152-1.008-2.592-1.008-4.32 0-1.888.448-3.568 1.344-5.04.928-1.472 2.24-2.608 3.936-3.408 1.728-.832 3.744-1.248 6.048-1.248 2.432 0 4.544.464 6.336 1.392 1.824.928 3.264 2.208 4.32 3.84 1.088 1.632 1.76 3.504 2.016 5.616l-4.32.288c-.192-1.408-.64-2.64-1.344-3.696-.704-1.088-1.648-1.92-2.832-2.496-1.184-.608-2.608-.912-4.272-.912-2.112 0-3.792.512-5.04 1.536-1.248.992-1.872 2.304-1.872 3.936 0 1.088.24 1.968.72 2.64.512.672 1.376 1.28 2.592 1.824 1.248.512 3.12 1.072 5.616 1.68 2.816.704 5.056 1.536 6.72 2.496 1.696.96 2.912 2.08 3.648 3.36.736 1.248 1.104 2.72 1.104 4.416 0 1.952-.512 3.664-1.536 5.136-1.024 1.44-2.448 2.56-4.272 3.36-1.792.8-3.84 1.2-6.144 1.2zm26.035-.768c-2.304 0-4.016-.528-5.136-1.584-1.088-1.056-1.632-2.704-1.632-4.944v-24.864h4.032v24.768c0 1.12.24 1.92.72 2.4.512.448 1.312.672 2.4.672h3.648v3.552h-4.032zm-10.512-25.44h14.544v3.552H55.843v-3.552zm27.146 26.016c-2.656 0-4.752-.608-6.288-1.824s-2.304-2.912-2.304-5.088.64-3.888 1.92-5.136 3.312-2.128 6.096-2.64l9.024-1.68c0-2.144-.512-3.744-1.536-4.8-.992-1.056-2.496-1.584-4.512-1.584-1.728 0-3.12.384-4.176 1.152-1.024.768-1.728 1.904-2.112 3.408l-4.272-.336c.48-2.464 1.648-4.416 3.504-5.856 1.888-1.472 4.24-2.208 7.056-2.208 3.232 0 5.712.912 7.44 2.736 1.76 1.824 2.64 4.368 2.64 7.632v10.512c0 .576.096.992.288 1.248.224.224.576.336 1.056.336h1.008v3.552c-.192.032-.416.048-.672.048-.256.032-.544.048-.864.048-1.76 0-3.008-.416-3.744-1.248s-1.104-2.208-1.104-4.128l.48.096c-.32 1.632-1.344 3.008-3.072 4.128-1.728 1.088-3.68 1.632-5.856 1.632zm.384-3.552c1.664 0 3.104-.32 4.32-.96 1.216-.672 2.144-1.568 2.784-2.688.64-1.152.96-2.432.96-3.84v-1.824l-8.256 1.536c-1.664.288-2.848.768-3.552 1.44-.672.64-1.008 1.504-1.008 2.592 0 1.184.416 2.112 1.248 2.784.832.64 2 .96 3.504.96zm29.594 3.552c-2.336 0-4.384-.544-6.144-1.632s-3.12-2.64-4.08-4.656-1.44-4.352-1.44-7.008.48-4.992 1.44-7.008 2.32-3.568 4.08-4.656 3.808-1.632 6.144-1.632c1.952 0 3.68.352 5.184 1.056a8.89 8.89 0 0 1 3.744 3.024c.96 1.312 1.584 2.896 1.872 4.752l-4.224.288c-.288-1.664-1.024-2.96-2.208-3.888-1.152-.928-2.608-1.392-4.368-1.392-2.336 0-4.16.832-5.472 2.496s-1.968 3.984-1.968 6.96.656 5.296 1.968 6.96 3.136 2.496 5.472 2.496c1.76 0 3.216-.48 4.368-1.44 1.184-.992 1.92-2.432 2.208-4.32l4.224.288c-.288 1.888-.912 3.536-1.872 4.944-.96 1.376-2.208 2.448-3.744 3.216s-3.264 1.152-5.184 1.152zm16.17-34.656h4.032v22.32l12.384-13.68h5.376l-10.032 10.8 10.464 14.64h-4.896l-8.304-11.904-4.992 5.28v6.624h-4.032v-34.08zM40.32 513.518c-2.592 0-4.864-.48-6.816-1.44-1.952-.992-3.504-2.368-4.656-4.128s-1.824-3.792-2.016-6.096l4.32-.288c.224 1.696.72 3.136 1.488 4.32a7.35 7.35 0 0 0 3.072 2.688c1.312.608 2.88.912 4.704.912 2.4 0 4.256-.464 5.568-1.392s1.968-2.256 1.968-3.984c0-1.12-.256-2.08-.768-2.88s-1.472-1.536-2.88-2.208-3.44-1.344-6.096-2.016c-2.688-.672-4.8-1.408-6.336-2.208-1.504-.8-2.608-1.76-3.312-2.88-.672-1.152-1.008-2.592-1.008-4.32 0-1.888.448-3.568 1.344-5.04.928-1.472 2.24-2.608 3.936-3.408 1.728-.832 3.744-1.248 6.048-1.248 2.432 0 4.544.464 6.336 1.392 1.824.928 3.264 2.208 4.32 3.84 1.088 1.632 1.76 3.504 2.016 5.616l-4.32.288c-.192-1.408-.64-2.64-1.344-3.696-.704-1.088-1.648-1.92-2.832-2.496-1.184-.608-2.608-.912-4.272-.912-2.112 0-3.792.512-5.04 1.536-1.248.992-1.872 2.304-1.872 3.936 0 1.088.24 1.968.72 2.64.512.672 1.376 1.28 2.592 1.824 1.248.512 3.12 1.072 5.616 1.68 2.816.704 5.056 1.536 6.72 2.496 1.696.96 2.912 2.08 3.648 3.36.736 1.248 1.104 2.72 1.104 4.416 0 1.952-.512 3.664-1.536 5.136-1.024 1.44-2.448 2.56-4.272 3.36-1.792.8-3.84 1.2-6.144 1.2zm28.725-.192c-2.336 0-4.384-.544-6.144-1.632s-3.12-2.64-4.08-4.656-1.44-4.352-1.44-7.008.48-4.992 1.44-7.008 2.32-3.568 4.08-4.656 3.808-1.632 6.144-1.632c1.952 0 3.68.352 5.184 1.056a8.89 8.89 0 0 1 3.744 3.024c.96 1.312 1.584 2.896 1.872 4.752l-4.224.288c-.288-1.664-1.024-2.96-2.208-3.888-1.152-.928-2.608-1.392-4.368-1.392-2.336 0-4.16.832-5.472 2.496s-1.968 3.984-1.968 6.96.656 5.296 1.968 6.96 3.136 2.496 5.472 2.496c1.76 0 3.216-.48 4.368-1.44 1.184-.992 1.92-2.432 2.208-4.32l4.224.288c-.288 1.888-.912 3.536-1.872 4.944-.96 1.376-2.208 2.448-3.744 3.216s-3.264 1.152-5.184 1.152zm26.25 0c-2.336 0-4.384-.544-6.144-1.632s-3.12-2.624-4.08-4.608c-.96-2.016-1.44-4.368-1.44-7.056s.48-5.024 1.44-7.008c.96-2.016 2.32-3.568 4.08-4.656s3.808-1.632 6.144-1.632c2.304 0 4.336.544 6.096 1.632s3.12 2.64 4.08 4.656c.96 1.984 1.44 4.32 1.44 7.008s-.48 5.04-1.44 7.056c-.96 1.984-2.32 3.52-4.08 4.608s-3.792 1.632-6.096 1.632zm0-3.84c2.336 0 4.144-.832 5.424-2.496 1.312-1.696 1.968-4.016 1.968-6.96s-.656-5.248-1.968-6.912c-1.28-1.696-3.088-2.544-5.424-2.544s-4.16.832-5.472 2.496-1.968 3.984-1.968 6.96.656 5.296 1.968 6.96 3.136 2.496 5.472 2.496zm17.483-22.176h3.552l.192 6.432-.384-.144c.32-2.144 1.008-3.728 2.064-4.752s2.496-1.536 4.32-1.536h2.496v3.84h-2.448c-1.28 0-2.352.24-3.216.72-.832.448-1.472 1.136-1.92 2.064-.416.928-.624 2.08-.624 3.456v15.36h-4.032v-25.44zm26.955 26.016c-2.368 0-4.432-.544-6.192-1.632s-3.12-2.624-4.08-4.608c-.928-2.016-1.392-4.368-1.392-7.056 0-2.656.464-4.992 1.392-7.008.96-2.016 2.304-3.568 4.032-4.656s3.744-1.632 6.048-1.632c2.208 0 4.16.528 5.856 1.584 1.696 1.024 3.008 2.544 3.936 4.56.96 2.016 1.44 4.416 1.44 7.2v1.2h-18.48c.128 2.688.832 4.736 2.112 6.144 1.312 1.376 3.088 2.064 5.328 2.064 1.632 0 2.976-.368 4.032-1.104 1.088-.768 1.856-1.824 2.304-3.168l4.32.336c-.672 2.336-1.968 4.224-3.888 5.664-1.888 1.408-4.144 2.112-6.768 2.112zm6.624-15.6c-.192-2.368-.896-4.144-2.112-5.328-1.184-1.216-2.752-1.824-4.704-1.824-1.984 0-3.616.608-4.896 1.824-1.248 1.216-2.032 2.992-2.352 5.328h14.064z"/>'
                '</g>'
                '<g style="mix-blend-mode:overlay" class="B">'
                '<path fill-rule="evenodd" d="M347.842 474c-4.883 0-8.842 3.959-8.842 8.842v24.316c0 4.883 3.959 8.842 8.842 8.842h24.316c4.883 0 8.842-3.959 8.842-8.842v-24.316c0-4.883-3.959-8.842-8.842-8.842h-24.316zm13.069 16.799a2.33 2.33 0 0 0-.911 1.85v16.059a1.46 1.46 0 0 0 1.458 1.458h12.25a1.46 1.46 0 0 0 1.459-1.458v-27.69c0-.484-.556-.758-.939-.463l-13.317 10.244z"/>'
                '</g>'
                '<g style="mix-blend-mode:overlay">'
                '<rect x="6.375" y="6.375" width="392.25" height="527.25" rx="17.625" stroke="#fff" stroke-width=".75"/>'
                '</g>'
                '<g style="mix-blend-mode:overlay">'
                '<path stroke="#fff" stroke-width=".75" d="M24 269.625h357"/>'
                '</g>'
                '</g>'
                '<defs>'
                '<filter id="A" x="-356.25" y="144" width="1152" height="582.75" filterUnits="userSpaceOnUse" class="C"><feFlood class="D"/><feBlend in="SourceGraphic"/><feGaussianBlur stdDeviation="63"/></filter>'
                '<filter id="B" x="-356.25" y="-186" width="1152" height="582" filterUnits="userSpaceOnUse" class="C"><feFlood class="D"/><feBlend in="SourceGraphic"/><feGaussianBlur stdDeviation="63"/></filter>'
                '<filter id="C" x="-373.5" y="69" width="1152" height="402" filterUnits="userSpaceOnUse" class="C"><feFlood class="D"/><feBlend in="SourceGraphic"/><feGaussianBlur stdDeviation="63"/></filter>'
                '<filter id="D" x="-3" y="-3" width="411" height="546" filterUnits="userSpaceOnUse" class="C"><feFlood class="D"/><feBlend in="SourceGraphic"/><feGaussianBlur stdDeviation="1.5"/></filter><clipPath id="E">'
                '<rect width="405" height="540" rx="24" fill-opacity="1" class="B"/>'
                '</clipPath></defs></svg>'
            )
        );

        return svg;
    }
}
